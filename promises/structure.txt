/*
  🧠 JavaScript Promise Template (Beginner-Friendly)
  --------------------------------------------------
  This template shows how to properly write and use Promises with clear variable names
  so it's easier to understand what's going on.
*/

let myPromise = new Promise((resolve, reject) => {
  // 👇 Simulate a task (like checking if something is true or waiting for a result)
  let taskIsSuccessful = true; // Change this to false to test the rejection

  if (taskIsSuccessful) {
    // ✅ Success! Call resolve and pass a message
    resolve("The task was successful!");
  } else {
    // ❌ Failure! Call reject and pass an error message
    reject("The task failed.");
  }
});

/*
  👇 Use the Promise with .then() for success, and .catch() for failure
*/

myPromise
  .then(successMessage => {
    // This runs if resolve() was called
    console.log("✅ Step 1:", successMessage);

    // You can return another message to pass to the next .then()
    return "Let's continue to the next step.";
  })
  .then(followUpMessage => {
    // This runs after the first .then(), using the return value above
    console.log("➡️ Step 2:", followUpMessage);
  })
  .catch(errorMessage => {
    // This runs if reject() was called
    console.log("❌ Error:", errorMessage);
  });

/*
  🔁 SUMMARY
  ---------
  - resolve("...") sends a value to .then()
  - reject("...") sends a value to .catch()
  - return inside a .then() passes a new value to the next .then()
  - This is great for things that take time (like loading data, waiting, etc.)
*/



============================
📘 When Should I Use Promises?
============================

Use Promises when dealing with ASYNCHRONOUS operations — that is,
tasks that take time and won’t return a result *immediately*.

-----------------------
✅ Common Use Cases
-----------------------

1. 📡 Fetching Data from APIs
   - fetch(), axios(), etc.
   - Example: fetch weather, GIFs, user data

2. ⏱️ Timers or Delays
   - setTimeout wrapped in a Promise to simulate async behavior

3. 💾 File Reading or Uploads
   - Reading files in the browser (e.g. FileReader)
   - Uploading images or data to a server

4. 🧠 Async Logic that Depends on Conditions
   - Simulating success/failure, like login or delivery status
   - Example: randomly resolve or reject after a delay

5. 🕹️ User Input + Delayed Responses
   - When the app waits for a user action before continuing
   - Useful for interactive projects (e.g. quizzes, progress bars)

6. 🔁 Chaining Sequential Tasks
   - When one async step must finish before the next begins
   - Example: fetch user → then fetch user's posts → then display

-------------------------
🚫 When NOT to Use Promises
-------------------------

- When your code is **completely synchronous**
  (e.g. simple math, string manipulation, DOM changes that don’t depend on delays)

- Inside tight loops where every step is instant

-------------------------
🧠 Key Concepts to Remember
-------------------------

- A Promise represents a value that may be available *now*, *later*, or *never*
- Use `.then()` to handle success
- Use `.catch()` to handle errors
- Use `.finally()` if you want something to run no matter what

-------------------------
✅ Tip: Simulate Promises
-------------------------

You don’t always need real APIs. You can simulate async behavior:

```js
function fakeLogin() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const success = Math.random() > 0.5;
      success ? resolve("Logged in!") : reject("Login failed.");
    }, 1500);
  });
}
